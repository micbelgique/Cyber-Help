using System;
using System.Text;
using System.Data.Common;
using System.Diagnostics;
using System.Collections.Generic;

namespace Apps72.Dev.Data
{
    /// <summary>
    /// Base class to manage DatabaseCommand
    /// </summary>
    [DebuggerDisplay("{CommandText}")]
    public abstract partial class DatabaseCommandBase : IDatabaseCommandBase
    {
        #region EVENTS

        /// <summary>
        /// Signature for ExceptionOccured event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public delegate void ExceptionOccuredEventHandler(object sender, ExceptionOccuredEventArgs e);

        /// <summary>
        /// Event raised when an SQL Exception occured (in Execute Methods)
        /// </summary>
        public event ExceptionOccuredEventHandler ExceptionOccured;

        #endregion

        #region CONSTRUCTORS

        /// <summary>
        /// Create a command for a SQL Server connection
        /// </summary>
        /// <param name="command">Active command with predefined CommandText and Connection</param>
        /// <param name="transaction">The transaction in which the SQL Query executes</param>
        /// <param name="commandTimeout">the wait time (in seconds) before terminating the attempt to execute a command and generating an error.</param>
        protected DatabaseCommandBase(DbCommand command, DbTransaction transaction, int commandTimeout)
        {
            this.ThrowException = true;
            this.Connection = command != null ? command.Connection : null;
            this.Command = command;

            if (transaction != null)
            {
                this.Transaction = transaction;
            }

            if (commandTimeout >= 0)
                this.Command.CommandTimeout = commandTimeout;

            this.CommandText = new StringBuilder(command != null ? command.CommandText : string.Empty);
        }

        #endregion

        #region PROPERTIES

        /// <summary>
        /// Gets the last raised exception 
        /// </summary>
        public virtual System.Data.Common.DbException Exception { get; private set; }

        /// <summary>
        /// Gets or sets the sql query
        /// </summary>
        public virtual System.Text.StringBuilder CommandText { get; set; }

        /// <summary>
        /// Gets or sets the command type
        /// </summary>
        public virtual System.Data.CommandType CommandType { get; set; }

        /// <summary>
        /// Gets or sets the current active connection
        /// </summary>
#if SQL_CLR
        public virtual DbConnection Connection { get; set; }
#else
        protected virtual DbConnection Connection { get; set; }
#endif

        /// <summary>
        /// Gets or sets the current DbCommand
        /// </summary>
        protected virtual DbCommand Command { get; set; }

        /// <summary>
        /// Gets or sets the current transaction
        /// </summary>
        public virtual DbTransaction Transaction
        {
            get
            {
                return this.Command.Transaction;
            }
            set
            {
                this.Command.Transaction = value as DbTransaction;
            }
        }

        /// <summary>
        /// Gets sql parameters of the query
        /// </summary>
        public virtual DbParameterCollection Parameters
        {
            get
            {
                return this.Command.Parameters;
            }
        }

        /// <summary>
        /// Enable or disable the raise of exceptions when queries are executed.
        /// Default is True (Enabled).
        /// </summary>
        public virtual bool ThrowException { get; set; }

        /// <summary>
        /// Set this property to log the SQL generated by this class to the given delegate. 
        /// For example, to log to the console, set this property to Console.Write.
        /// </summary>
        public virtual Action<string> Log { get; set; }

        #endregion

        #region METHODS

        /// <summary>
        /// Gets the CommandText formatted with specified format
        /// </summary>
        /// <param name="format">Use Text to format as Simple SQL Query or use HTML to format as Colored SQL Query.</param>
        /// <returns>Formatted query</returns>
        public virtual string GetCommandTextFormatted(QueryFormat format)
        {
            string sql = this.CommandText.ToString();
            if (String.CompareOrdinal(sql, this.Command.CommandText) != 0)
                this.Command.CommandText = sql;

            return new CommandTextFormatted(this.Command).GetSqlFormatted(format);
        }

        /// <summary>
        /// Delete the CommandText and the all sql parameters
        /// </summary>
        public virtual void Clear()
        {
            this.CommandText.Length = 0;
            this.Parameters.Clear();
        }

        /// <summary>
        /// Prepare a query
        /// </summary>
        public virtual void Prepare()
        {
            this.Command.CommandText = this.CommandText.ToString();
            this.Command.Prepare();
        }

        /// <summary>
        /// Begin a transaction into the database
        /// </summary>
        /// <returns>Transaction</returns>
        public virtual DbTransaction TransactionBegin()
        {
            if (this.Log != null)
                this.Log.Invoke("BEGIN TRANSACTION");

            if (!this.Connection.ContainsDataInjectionDataTable())
            {
                this.Command.Transaction = this.Command.Connection.BeginTransaction();
                return this.Command.Transaction;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Commit the current transaction to the database
        /// </summary>
        public virtual void TransactionCommit()
        {
            if (this.Command != null && this.Command.Transaction != null)
            {
                if (this.Log != null)
                    this.Log.Invoke("COMMIT");

                if (!this.Connection.ContainsDataInjectionDataTable())
                {
                    this.Command.Transaction.Commit();
                }
            }
        }

        /// <summary>
        /// Rollback the current transaction 
        /// </summary>
        public virtual void TransactionRollback()
        {
            if (this.Command != null && this.Command.Transaction != null)
            {
                if (this.Log != null)
                    this.Log.Invoke("ROLLBACK");

                if (!this.Connection.ContainsDataInjectionDataTable())
                {
                    this.Command.Transaction.Rollback();
                }
            }
        }

        /// <summary>
        /// Execute the query and return an internal DataTable with all data.
        /// </summary>
        /// <param name="firstRowOnly"></param>
        /// <returns></returns>
        internal virtual Internal.DataTable ExecuteInternalDataTable(bool firstRowOnly)
        {
            ResetException();

            try
            {
                string sql = this.CommandText.ToString();

                if (String.CompareOrdinal(sql, this.Command.CommandText) != 0) this.Command.CommandText = sql;

                if (this.Log != null)
                    this.Log.Invoke(this.Command.CommandText);

                // If UnitTest activated, invoke the "Get Method" to retrieve custom data
                if (this.Connection.ContainsDataInjectionDataTable())
                {
                    DataInjectionDbCommand command = this.Connection.InvokeAndReturnData(this);
                    return command.GetDataTable();
                }
                else
                {
                    // Send the request to the Database server
                    Internal.DataTable data = new Internal.DataTable();
                    using (DbDataReader dr = this.Command.ExecuteReader())
                    {
                        data.Load(dr, firstRowOnly);
                        return data;
                    }
                }
            }
            catch (DbException ex)
            {
                return ThrowSqlExceptionOrDefaultValue<Internal.DataTable>(ex);
            }
           
        }

        /// <summary>
        /// Execute the query and return an array of new instances of typed results filled with data table result.
        /// </summary>
        /// <typeparam name="TReturn">Object type</typeparam>
        /// <returns>Array of typed results</returns>
        /// <example>
        /// <code>
        ///   Employee[] emp = cmd.ExecuteTable&lt;Employee&gt;();
        ///   var x = cmd.ExecuteTable&lt;Employee&gt;();
        /// </code>
        /// <remarks>
        ///   Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
        ///   to set which column name (ex. [Column("Name")] must be associated to this property.
        /// </remarks>
        /// </example>
        public virtual IEnumerable<TReturn> ExecuteTable<TReturn>()
        {
            Internal.DataTable table = this.ExecuteInternalDataTable(firstRowOnly: false);
            return table.ConvertTo<TReturn>();
        }

        /// <summary>
        /// Execute the query and return an array of new instances of typed results filled with data table result.
        /// </summary>
        /// <typeparam name="TReturn">Object type</typeparam>
        /// <param name="itemOftype"></param>
        /// <returns>Array of typed results</returns>
        /// <example>
        /// <code>
        ///   Employee emp = new Employee();
        ///   var x = cmd.ExecuteTable(new { emp.Age, emp.Name });
        ///   var y = cmd.ExecuteTable(new { Age = 0, Name = "" });
        /// </code>
        /// <remarks>
        ///   Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
        ///   to set which column name (ex. [Column("Name")] must be associated to this property.
        /// </remarks>
        /// </example>
        public virtual IEnumerable<TReturn> ExecuteTable<TReturn>(TReturn itemOftype)
        {
            return ExecuteTable<TReturn>();
        }

        /// <summary>
        /// Execute the query and return a new instance of TReturn with the first row of results
        /// </summary>
        /// <typeparam name="TReturn">Object type</typeparam>
        /// <returns>First row of results</returns>
        /// <example>
        /// <code>
        ///   Employee emp = cmd.ExecuteRow&lt;Employee&gt;();
        /// </code>
        /// <remarks>
        ///   Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
        ///   to set which column name (ex. [Column("Name")] must be associated to this property.
        /// </remarks>
        /// </example>
        public virtual TReturn ExecuteRow<TReturn>()
        {
            return this.ExecuteRow<TReturn>(default(TReturn));
        }

        /// <summary>
        /// Execute the query and fill the specified TReturn object with the first row of results
        /// </summary>
        /// <typeparam name="TReturn">Object type</typeparam>
        /// <param name="itemOftype"></param>
        /// <returns>First row of results</returns>
        /// <example>
        /// <code>
        ///   Employee emp = new Employee();
        ///   var x = cmd.ExecuteRow(new { emp.Age, emp.Name });
        ///   var y = cmd.ExecuteRow(new { Age = 0, Name = "" });
        ///   var z = cmd.ExecuteRow(emp);
        /// </code>
        /// <remarks>
        ///   Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
        ///   to set which column name (ex. [Column("Name")] must be associated to this property.
        /// </remarks>
        /// </example>
        public virtual TReturn ExecuteRow<TReturn>(TReturn itemOftype)
        {
            if (Convertor.TypeExtension.IsPrimitive(typeof(TReturn)))
            {
                return this.ExecuteScalar<TReturn>();
            }
            else
            {
                Internal.DataTable table = this.ExecuteInternalDataTable(firstRowOnly: true);
                if (table.Rows.Length > 0)
                    return table.Rows[0].ConvertTo<TReturn>(itemOftype);
                else
                    return default(TReturn);
            }            
        }

        /// <summary>
        /// Execute the query and return the count of modified rows
        /// </summary>
        /// <returns>Count of modified rows</returns>
        public virtual int ExecuteNonQuery()
        {
            ResetException();

            try
            {

                string sql = this.CommandText.ToString();

                if (String.CompareOrdinal(sql, this.Command.CommandText) != 0) this.Command.CommandText = sql;

                if (this.Log != null)
                    this.Log.Invoke(this.Command.CommandText);

                // If UnitTest activated, invoke the "Get Method" to retrieve custom data
                if (this.Connection.ContainsDataInjectionDataTable())
                {
                    DataInjectionDbCommand command = this.Connection.InvokeAndReturnData(this);
                    return command.GetDataTable().Rows.Length;
                }
                else
                {
                    // Send the request to the Database server
                    return this.Command.ExecuteNonQuery();
                }
            }
            catch (DbException ex)
            {
                return ThrowSqlExceptionOrDefaultValue<int>(ex);
            }

        }

        /// <summary>
        /// Execute the query and return the first column of the first row of results
        /// </summary>
        /// <returns>Object - Result</returns>
        public virtual object ExecuteScalar()
        {
            ResetException();

            try
            {

                string sql = this.CommandText.ToString();
                if (String.CompareOrdinal(sql, this.Command.CommandText) != 0)
                    this.Command.CommandText = sql;

                if (this.Log != null)
                    this.Log.Invoke(this.Command.CommandText);

                // If UnitTest activated, invoke the "Get Method" to retrieve custom data
                if (this.Connection.ContainsDataInjectionDataTable())
                {
                    DataInjectionDbCommand command = this.Connection.InvokeAndReturnData(this);
                    return command.GetScalar();
                }
                else
                {
                    // Send the request to the Database server
                    return this.Command.ExecuteScalar();
                }
            }
            catch (DbException ex)
            {
                return ThrowSqlExceptionOrDefaultValue<object>(ex);
            }

        }

        /// <summary>
        /// Execute the query and return the first column of the first row of results
        /// </summary>
        /// <typeparam name="TReturn">Return type</typeparam>
        /// <returns>Result</returns>
        public virtual TReturn ExecuteScalar<TReturn>()
        {
            object scalar = this.ExecuteScalar();

            if (scalar == null || scalar == DBNull.Value)
                return default(TReturn);
            else
                return (TReturn)scalar;

        }

        /// <summary>
        /// Raises the ExceptionOccured event.
        /// </summary>
        /// <param name="e"></param>
        protected virtual void OnExceptionOccured(ExceptionOccuredEventArgs e)
        {
            if (this.ExceptionOccured != null)
            {
                ExceptionOccured(this, e);
            }
        }

        /// <summary>
        /// Dispose the object and free ressources
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
        }

        /// <summary>
        /// Dispose the object and free ressources
        /// </summary>
        /// <param name="disposing"></param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {

            }

            if (this.Command != null)
                this.Command.Dispose();
        }

#if !SQL_CLR

        /// <summary>
        /// Dispose the object and free ressources
        /// </summary>
        ~DatabaseCommandBase()
        {
            Dispose(false);
        }

#endif

        #endregion

        #region PRIVATE



        /// <summary>
        /// Set the last raised exception to null
        /// </summary>
        protected virtual void ResetException()
        {
            this.Exception = null;
        }

        /// <summary>
        /// Raise the Exception if the ThrowException property is set to TRUE
        /// </summary>
        /// <typeparam name="T">Type</typeparam>
        /// <param name="ex">Exception</param>
        /// <returns></returns>
        protected virtual T ThrowSqlExceptionOrDefaultValue<T>(DbException ex)
        {
            this.Exception = ex;

            OnExceptionOccured(new ExceptionOccuredEventArgs() { Exception = this.Exception });

            if (ex != null)
            {
                if (this.ThrowException) throw ex;
            }

            return default(T);
        }

        #endregion
    }
}
